{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useAuth.js\nimport { useState, useEffect, useCallback } from \"react\";\nlet logoutTimer;\nexport const useAuth = () => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null);\n  const [role, setRole] = useState(null);\n  const [name, setName] = useState(null);\n  const [employeeID, setEmployeeID] = useState(null);\n  const [department, setDepartment] = useState(null);\n  const [tokenExpirationDate, setTokenExpirationDate] = useState(null);\n  const login = useCallback(async (email, password) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.detail || \"Login failed\");\n      }\n      const {\n        token\n      } = data;\n\n      // Decode token to get user info (you might want to verify this on backend)\n      const decoded = JSON.parse(atob(token.split('.')[1]));\n      const expirationDate = new Date(decoded.exp * 1000);\n      setIsLoggedIn(true);\n      setToken(token);\n      setEmployeeID(decoded.employeeID);\n      setUserId(decoded.sub); // email from token\n      setRole(decoded.role || \"employee\"); // Add role to your JWT payload\n      setName(decoded.name || \"User\"); // Add name to your JWT payload\n\n      setTokenExpirationDate(expirationDate);\n      localStorage.setItem(\"userData\", JSON.stringify({\n        userId: decoded.sub,\n        token,\n        employeeID: decoded.employeeID,\n        role: decoded.role,\n        name: decoded.name,\n        expiration: expirationDate.toISOString()\n      }));\n      return true;\n    } catch (err) {\n      console.error(\"Login error:\", err);\n      return false;\n    }\n  }, []);\n  const register = useCallback(async (name, email, password, role) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password,\n          role\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.detail || \"Registration failed\");\n      }\n      return true;\n    } catch (err) {\n      console.error(\"Registration error:\", err);\n      return false;\n    }\n  }, []);\n  const logout = useCallback(() => {\n    setIsLoggedIn(false);\n    setToken(null);\n    setUserId(null);\n    setRole(null);\n    setName(null);\n    setTokenExpirationDate(null);\n    localStorage.removeItem(\"userData\");\n  }, []);\n  useEffect(() => {\n    if (token && tokenExpirationDate) {\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExpirationDate]);\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\n    if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\n      setIsLoggedIn(true);\n      setToken(storedData.token);\n      setUserId(storedData.userId);\n      setRole(storedData.role);\n      setName(storedData.name);\n      setEmployeeID(storedData.employeeID);\n      setTokenExpirationDate(new Date(storedData.expiration));\n    }\n  }, []);\n  return {\n    isLoggedIn,\n    userId,\n    token,\n    role,\n    name,\n    login,\n    logout,\n    register\n  };\n};\n_s(useAuth, \"LSi0+w1VXyZGunidNUTWkGs1Wcs=\");","map":{"version":3,"names":["useState","useEffect","useCallback","logoutTimer","useAuth","_s","isLoggedIn","setIsLoggedIn","userId","setUserId","token","setToken","role","setRole","name","setName","employeeID","setEmployeeID","department","setDepartment","tokenExpirationDate","setTokenExpirationDate","login","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","detail","decoded","parse","atob","split","expirationDate","Date","exp","sub","localStorage","setItem","expiration","toISOString","err","console","error","register","logout","removeItem","remainingTime","getTime","setTimeout","clearTimeout","storedData","getItem"],"sources":["C:/Users/Ashwini/Desktop/DPDZERO/frontend/src/hooks/useAuth.js"],"sourcesContent":["// hooks/useAuth.js\r\nimport { useState, useEffect, useCallback } from \"react\";\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userId, setUserId] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  const [role, setRole] = useState(null);\r\n  const [name, setName] = useState(null);\r\n  const [employeeID,setEmployeeID]=useState(null);\r\n  const [department, setDepartment] = useState(null);\r\n  const [tokenExpirationDate, setTokenExpirationDate] = useState(null);\r\n\r\n  const login = useCallback(async (email, password) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          email,\r\n          password,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.detail || \"Login failed\");\r\n      }\r\n\r\n      const { token } = data;\r\n      \r\n      // Decode token to get user info (you might want to verify this on backend)\r\n      const decoded = JSON.parse(atob(token.split('.')[1]));\r\n      \r\n      const expirationDate = new Date(decoded.exp * 1000);\r\n      \r\n      setIsLoggedIn(true);\r\n      setToken(token);\r\n      setEmployeeID(decoded.employeeID);\r\n      setUserId(decoded.sub); // email from token\r\n      setRole(decoded.role || \"employee\"); // Add role to your JWT payload\r\n      setName(decoded.name || \"User\"); // Add name to your JWT payload\r\n      \r\n      setTokenExpirationDate(expirationDate);\r\n      \r\n      localStorage.setItem(\r\n        \"userData\",\r\n        JSON.stringify({\r\n          userId: decoded.sub,\r\n          token,\r\n          employeeID:decoded.employeeID,\r\n          role: decoded.role,\r\n          name: decoded.name,\r\n          expiration: expirationDate.toISOString(),\r\n        })\r\n      );\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Login error:\", err);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  const register = useCallback(async (name, email, password, role) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/register\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name,\r\n          email,\r\n          password,\r\n          role,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.detail || \"Registration failed\");\r\n      }\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Registration error:\", err);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setIsLoggedIn(false);\r\n    setToken(null);\r\n    setUserId(null);\r\n    setRole(null);\r\n    setName(null);\r\n    setTokenExpirationDate(null);\r\n    localStorage.removeItem(\"userData\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (token && tokenExpirationDate) {\r\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\r\n      logoutTimer = setTimeout(logout, remainingTime);\r\n    } else {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  }, [token, logout, tokenExpirationDate]);\r\n\r\n  useEffect(() => {\r\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    if (\r\n      storedData &&\r\n      storedData.token &&\r\n      new Date(storedData.expiration) > new Date()\r\n    ) {\r\n      setIsLoggedIn(true);\r\n      setToken(storedData.token);\r\n      setUserId(storedData.userId);\r\n      setRole(storedData.role);\r\n      setName(storedData.name);\r\n      setEmployeeID(storedData.employeeID);\r\n      setTokenExpirationDate(new Date(storedData.expiration));\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    isLoggedIn,\r\n    userId,\r\n    token,\r\n    role,\r\n    name,\r\n    login,\r\n    logout,\r\n    register,\r\n  };\r\n};"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAExD,IAAIC,WAAW;AAEf,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACgB,UAAU,EAACC,aAAa,CAAC,GAACjB,QAAQ,CAAC,IAAI,CAAC;EAC/C,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACoB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAEpE,MAAMsB,KAAK,GAAGpB,WAAW,CAAC,OAAOqB,KAAK,EAAEC,QAAQ,KAAK;IACnD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QAC1DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBR,KAAK;UACLC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,MAAM,IAAI,cAAc,CAAC;MAChD;MAEA,MAAM;QAAE1B;MAAM,CAAC,GAAGsB,IAAI;;MAEtB;MACA,MAAMK,OAAO,GAAGP,IAAI,CAACQ,KAAK,CAACC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAErD,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAACL,OAAO,CAACM,GAAG,GAAG,IAAI,CAAC;MAEnDpC,aAAa,CAAC,IAAI,CAAC;MACnBI,QAAQ,CAACD,KAAK,CAAC;MACfO,aAAa,CAACoB,OAAO,CAACrB,UAAU,CAAC;MACjCP,SAAS,CAAC4B,OAAO,CAACO,GAAG,CAAC,CAAC,CAAC;MACxB/B,OAAO,CAACwB,OAAO,CAACzB,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC;MACrCG,OAAO,CAACsB,OAAO,CAACvB,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC;;MAEjCO,sBAAsB,CAACoB,cAAc,CAAC;MAEtCI,YAAY,CAACC,OAAO,CAClB,UAAU,EACVhB,IAAI,CAACC,SAAS,CAAC;QACbvB,MAAM,EAAE6B,OAAO,CAACO,GAAG;QACnBlC,KAAK;QACLM,UAAU,EAACqB,OAAO,CAACrB,UAAU;QAC7BJ,IAAI,EAAEyB,OAAO,CAACzB,IAAI;QAClBE,IAAI,EAAEuB,OAAO,CAACvB,IAAI;QAClBiC,UAAU,EAAEN,cAAc,CAACO,WAAW,CAAC;MACzC,CAAC,CACH,CAAC;MAED,OAAO,IAAI;IACb,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,GAAG,CAAC;MAClC,OAAO,KAAK;IACd;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,QAAQ,GAAGlD,WAAW,CAAC,OAAOY,IAAI,EAAES,KAAK,EAAEC,QAAQ,EAAEZ,IAAI,KAAK;IAClE,IAAI;MACF,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;QAC7DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBjB,IAAI;UACJS,KAAK;UACLC,QAAQ;UACRZ;QACF,CAAC;MACH,CAAC,CAAC;MAEF,MAAMoB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,MAAM,IAAI,qBAAqB,CAAC;MACvD;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOa,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;MACzC,OAAO,KAAK;IACd;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,MAAM,GAAGnD,WAAW,CAAC,MAAM;IAC/BK,aAAa,CAAC,KAAK,CAAC;IACpBI,QAAQ,CAAC,IAAI,CAAC;IACdF,SAAS,CAAC,IAAI,CAAC;IACfI,OAAO,CAAC,IAAI,CAAC;IACbE,OAAO,CAAC,IAAI,CAAC;IACbM,sBAAsB,CAAC,IAAI,CAAC;IAC5BwB,YAAY,CAACS,UAAU,CAAC,UAAU,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAENrD,SAAS,CAAC,MAAM;IACd,IAAIS,KAAK,IAAIU,mBAAmB,EAAE;MAChC,MAAMmC,aAAa,GAAGnC,mBAAmB,CAACoC,OAAO,CAAC,CAAC,GAAG,IAAId,IAAI,CAAC,CAAC,CAACc,OAAO,CAAC,CAAC;MAC1ErD,WAAW,GAAGsD,UAAU,CAACJ,MAAM,EAAEE,aAAa,CAAC;IACjD,CAAC,MAAM;MACLG,YAAY,CAACvD,WAAW,CAAC;IAC3B;EACF,CAAC,EAAE,CAACO,KAAK,EAAE2C,MAAM,EAAEjC,mBAAmB,CAAC,CAAC;EAExCnB,SAAS,CAAC,MAAM;IACd,MAAM0D,UAAU,GAAG7B,IAAI,CAACQ,KAAK,CAACO,YAAY,CAACe,OAAO,CAAC,UAAU,CAAC,CAAC;IAC/D,IACED,UAAU,IACVA,UAAU,CAACjD,KAAK,IAChB,IAAIgC,IAAI,CAACiB,UAAU,CAACZ,UAAU,CAAC,GAAG,IAAIL,IAAI,CAAC,CAAC,EAC5C;MACAnC,aAAa,CAAC,IAAI,CAAC;MACnBI,QAAQ,CAACgD,UAAU,CAACjD,KAAK,CAAC;MAC1BD,SAAS,CAACkD,UAAU,CAACnD,MAAM,CAAC;MAC5BK,OAAO,CAAC8C,UAAU,CAAC/C,IAAI,CAAC;MACxBG,OAAO,CAAC4C,UAAU,CAAC7C,IAAI,CAAC;MACxBG,aAAa,CAAC0C,UAAU,CAAC3C,UAAU,CAAC;MACpCK,sBAAsB,CAAC,IAAIqB,IAAI,CAACiB,UAAU,CAACZ,UAAU,CAAC,CAAC;IACzD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLzC,UAAU;IACVE,MAAM;IACNE,KAAK;IACLE,IAAI;IACJE,IAAI;IACJQ,KAAK;IACL+B,MAAM;IACND;EACF,CAAC;AACH,CAAC;AAAC/C,EAAA,CA1IWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}