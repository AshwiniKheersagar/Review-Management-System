{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nlet logoutTimer;\nexport const useAuth = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null);\n  const [role, setRole] = useState(null);\n  const [name, setName] = useState(null);\n  const [employeeID, setEmployeeID] = useState(null);\n  const [tokenExpirationDate, setTokenExpirationDate] = useState(null);\n  const login = useCallback(async (email, password) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.detail || \"Login failed\");\n      }\n      const {\n        token\n      } = data;\n      const decoded = JSON.parse(atob(token.split('.')[1]));\n      const expirationDate = new Date(decoded.exp * 1000);\n      setIsLoggedIn(true);\n      setToken(token);\n      setEmployeeID(decoded.employeeID);\n      setUserId(decoded.sub);\n      setRole(decoded.role || \"employee\");\n      setName(decoded.name || \"User\");\n      setTokenExpirationDate(expirationDate);\n      localStorage.setItem(\"userData\", JSON.stringify({\n        userId: decoded.sub,\n        token,\n        employeeID: decoded.employeeID,\n        role: decoded.role,\n        name: decoded.name,\n        expiration: expirationDate.toISOString()\n      }));\n      return true;\n    } catch (err) {\n      console.error(\"Login error:\", err);\n      return false;\n    }\n  }, []);\n  const register = useCallback(async (name, email, password, role) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password,\n          role\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.detail || \"Registration failed\");\n      }\n      return true;\n    } catch (err) {\n      console.error(\"Registration error:\", err);\n      return false;\n    }\n  }, []);\n  const logout = useCallback(() => {\n    setIsLoggedIn(false);\n    setToken(null);\n    setUserId(null);\n    setRole(null);\n    setName(null);\n    setTokenExpirationDate(null);\n    localStorage.removeItem(\"userData\");\n  }, []);\n  useEffect(() => {\n    if (token && tokenExpirationDate) {\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExpirationDate]);\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const storedData = JSON.parse(localStorage.getItem(\"userData\"));\n        if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\n          setIsLoggedIn(true);\n          setToken(storedData.token);\n          setUserId(storedData.userId);\n          setRole(storedData.role);\n          setName(storedData.name);\n          setEmployeeID(storedData.employeeID);\n          setTokenExpirationDate(new Date(storedData.expiration));\n        }\n      } catch (err) {\n        console.error(\"Auth check error:\", err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  return {\n    isLoading,\n    isLoggedIn,\n    userId,\n    token,\n    employeeID,\n    role,\n    name,\n    login,\n    logout,\n    register\n  };\n};\n_s(useAuth, \"o8u3ftBP4gP5/11k4aBlMoslMb4=\");","map":{"version":3,"names":["useState","useEffect","useCallback","logoutTimer","useAuth","_s","isLoading","setIsLoading","isLoggedIn","setIsLoggedIn","userId","setUserId","token","setToken","role","setRole","name","setName","employeeID","setEmployeeID","tokenExpirationDate","setTokenExpirationDate","login","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","detail","decoded","parse","atob","split","expirationDate","Date","exp","sub","localStorage","setItem","expiration","toISOString","err","console","error","register","logout","removeItem","remainingTime","getTime","setTimeout","clearTimeout","checkAuth","storedData","getItem"],"sources":["C:/Users/Ashwini/Desktop/DPDZERO/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userId, setUserId] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  const [role, setRole] = useState(null);\r\n  const [name, setName] = useState(null);\r\n  const [employeeID, setEmployeeID] = useState(null);\r\n  const [tokenExpirationDate, setTokenExpirationDate] = useState(null);\r\n\r\n  const login = useCallback(async (email, password) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          email,\r\n          password,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.detail || \"Login failed\");\r\n      }\r\n\r\n      const { token } = data;\r\n      const decoded = JSON.parse(atob(token.split('.')[1]));\r\n      const expirationDate = new Date(decoded.exp * 1000);\r\n      \r\n      setIsLoggedIn(true);\r\n      setToken(token);\r\n      setEmployeeID(decoded.employeeID);\r\n      setUserId(decoded.sub);\r\n      setRole(decoded.role || \"employee\");\r\n      setName(decoded.name || \"User\");\r\n      setTokenExpirationDate(expirationDate);\r\n      \r\n      localStorage.setItem(\r\n        \"userData\",\r\n        JSON.stringify({\r\n          userId: decoded.sub,\r\n          token,\r\n          employeeID: decoded.employeeID,\r\n          role: decoded.role,\r\n          name: decoded.name,\r\n          expiration: expirationDate.toISOString(),\r\n        })\r\n      );\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Login error:\", err);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  const register = useCallback(async (name, email, password, role) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/register\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name,\r\n          email,\r\n          password,\r\n          role,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.detail || \"Registration failed\");\r\n      }\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Registration error:\", err);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setIsLoggedIn(false);\r\n    setToken(null);\r\n    setUserId(null);\r\n    setRole(null);\r\n    setName(null);\r\n    setTokenExpirationDate(null);\r\n    localStorage.removeItem(\"userData\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (token && tokenExpirationDate) {\r\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\r\n      logoutTimer = setTimeout(logout, remainingTime);\r\n    } else {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  }, [token, logout, tokenExpirationDate]);\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const storedData = JSON.parse(localStorage.getItem(\"userData\"));\r\n        if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\r\n          setIsLoggedIn(true);\r\n          setToken(storedData.token);\r\n          setUserId(storedData.userId);\r\n          setRole(storedData.role);\r\n          setName(storedData.name);\r\n          setEmployeeID(storedData.employeeID);\r\n          setTokenExpirationDate(new Date(storedData.expiration));\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Auth check error:\", err);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  return {\r\n    isLoading,\r\n    isLoggedIn,\r\n    userId,\r\n    token,\r\n    employeeID,\r\n    role,\r\n    name,\r\n    login,\r\n    logout,\r\n    register,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}