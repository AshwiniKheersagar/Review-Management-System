{"ast":null,"code":"import{useState,useEffect,useCallback}from\"react\";let logoutTimer;export const useAuth=()=>{const[isLoading,setIsLoading]=useState(true);const[isLoggedIn,setIsLoggedIn]=useState(false);const[userId,setUserId]=useState(null);const[token,setToken]=useState(null);const[role,setRole]=useState(null);const[name,setName]=useState(null);const[employeeID,setEmployeeID]=useState(null);const[tokenExpirationDate,setTokenExpirationDate]=useState(null);const login=useCallback(async(email,password)=>{try{const response=await fetch(\"http://localhost:8000/login\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email,password})});const data=await response.json();if(!response.ok){throw new Error(data.detail||\"Login failed\");}const{token}=data;const decoded=JSON.parse(atob(token.split('.')[1]));const expirationDate=new Date(decoded.exp*1000);setIsLoggedIn(true);setToken(token);setEmployeeID(decoded.employeeID);setUserId(decoded.sub);setRole(decoded.role||\"employee\");setName(decoded.name||\"User\");setTokenExpirationDate(expirationDate);localStorage.setItem(\"userData\",JSON.stringify({userId:decoded.sub,token,employeeID:decoded.employeeID,role:decoded.role,name:decoded.name,expiration:expirationDate.toISOString()}));return true;}catch(err){console.error(\"Login error:\",err);return false;}},[]);const register=useCallback(async(name,email,password,role)=>{try{const response=await fetch(\"http://localhost:8000/register\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({name,email,password,role})});const data=await response.json();if(!response.ok){throw new Error(data.detail||\"Registration failed\");}return true;}catch(err){console.error(\"Registration error:\",err);return false;}},[]);const logout=useCallback(()=>{setIsLoggedIn(false);setToken(null);setUserId(null);setRole(null);setName(null);setTokenExpirationDate(null);localStorage.removeItem(\"userData\");},[]);useEffect(()=>{if(token&&tokenExpirationDate){const remainingTime=tokenExpirationDate.getTime()-new Date().getTime();logoutTimer=setTimeout(logout,remainingTime);}else{clearTimeout(logoutTimer);}},[token,logout,tokenExpirationDate]);useEffect(()=>{const checkAuth=async()=>{try{const storedData=JSON.parse(localStorage.getItem(\"userData\"));if(storedData&&storedData.token&&new Date(storedData.expiration)>new Date()){setIsLoggedIn(true);setToken(storedData.token);setUserId(storedData.userId);setRole(storedData.role);setName(storedData.name);setEmployeeID(storedData.employeeID);setTokenExpirationDate(new Date(storedData.expiration));}}catch(err){console.error(\"Auth check error:\",err);}finally{setIsLoading(false);}};checkAuth();},[]);return{isLoading,isLoggedIn,userId,token,employeeID,role,name,login,logout,register};};","map":{"version":3,"names":["useState","useEffect","useCallback","logoutTimer","useAuth","isLoading","setIsLoading","isLoggedIn","setIsLoggedIn","userId","setUserId","token","setToken","role","setRole","name","setName","employeeID","setEmployeeID","tokenExpirationDate","setTokenExpirationDate","login","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","detail","decoded","parse","atob","split","expirationDate","Date","exp","sub","localStorage","setItem","expiration","toISOString","err","console","error","register","logout","removeItem","remainingTime","getTime","setTimeout","clearTimeout","checkAuth","storedData","getItem"],"sources":["C:/Users/Ashwini/Desktop/DPDZERO/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userId, setUserId] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  const [role, setRole] = useState(null);\r\n  const [name, setName] = useState(null);\r\n  const [employeeID, setEmployeeID] = useState(null);\r\n  const [tokenExpirationDate, setTokenExpirationDate] = useState(null);\r\n\r\n  const login = useCallback(async (email, password) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          email,\r\n          password,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.detail || \"Login failed\");\r\n      }\r\n\r\n      const { token } = data;\r\n      const decoded = JSON.parse(atob(token.split('.')[1]));\r\n      const expirationDate = new Date(decoded.exp * 1000);\r\n      \r\n      setIsLoggedIn(true);\r\n      setToken(token);\r\n      setEmployeeID(decoded.employeeID);\r\n      setUserId(decoded.sub);\r\n      setRole(decoded.role || \"employee\");\r\n      setName(decoded.name || \"User\");\r\n      setTokenExpirationDate(expirationDate);\r\n      \r\n      localStorage.setItem(\r\n        \"userData\",\r\n        JSON.stringify({\r\n          userId: decoded.sub,\r\n          token,\r\n          employeeID: decoded.employeeID,\r\n          role: decoded.role,\r\n          name: decoded.name,\r\n          expiration: expirationDate.toISOString(),\r\n        })\r\n      );\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Login error:\", err);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  const register = useCallback(async (name, email, password, role) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/register\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name,\r\n          email,\r\n          password,\r\n          role,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.detail || \"Registration failed\");\r\n      }\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Registration error:\", err);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setIsLoggedIn(false);\r\n    setToken(null);\r\n    setUserId(null);\r\n    setRole(null);\r\n    setName(null);\r\n    setTokenExpirationDate(null);\r\n    localStorage.removeItem(\"userData\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (token && tokenExpirationDate) {\r\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\r\n      logoutTimer = setTimeout(logout, remainingTime);\r\n    } else {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  }, [token, logout, tokenExpirationDate]);\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const storedData = JSON.parse(localStorage.getItem(\"userData\"));\r\n        if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\r\n          setIsLoggedIn(true);\r\n          setToken(storedData.token);\r\n          setUserId(storedData.userId);\r\n          setRole(storedData.role);\r\n          setName(storedData.name);\r\n          setEmployeeID(storedData.employeeID);\r\n          setTokenExpirationDate(new Date(storedData.expiration));\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Auth check error:\", err);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  return {\r\n    isLoading,\r\n    isLoggedIn,\r\n    userId,\r\n    token,\r\n    employeeID,\r\n    role,\r\n    name,\r\n    login,\r\n    logout,\r\n    register,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}