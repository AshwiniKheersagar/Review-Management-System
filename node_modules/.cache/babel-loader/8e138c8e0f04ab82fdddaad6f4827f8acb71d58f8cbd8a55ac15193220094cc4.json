{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nlet logoutTimer;\nexport const useAuth = () => {\n  _s();\n  const [authState, setAuthState] = useState({\n    isLoggedIn: false,\n    userId: null,\n    // From token 'userId'\n    employeeId: null,\n    // From token 'employeeId'\n    token: null,\n    role: null,\n    name: null,\n    tokenExpiration: null\n  });\n  const parseJwt = token => {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (e) {\n      return null;\n    }\n  };\n  const login = useCallback(async (email, password) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || \"Login failed\");\n      }\n      const {\n        token\n      } = await response.json();\n      const decoded = parseJwt(token);\n\n      // Validate token structure\n      if (!decoded.sub || !decoded.userId || !decoded.role) {\n        throw new Error(\"Invalid token structure\");\n      }\n      const expirationDate = new Date(decoded.exp * 1000);\n      const newAuthState = {\n        isLoggedIn: true,\n        userId: decoded.userId,\n        // Changed from decoded.sub\n        employeeId: decoded.employeeId,\n        token,\n        role: decoded.role,\n        name: decoded.name || \"User\",\n        tokenExpiration: expirationDate\n      };\n      setAuthState(newAuthState);\n      localStorage.setItem(\"userData\", JSON.stringify({\n        userId: decoded.userId,\n        // Changed from decoded.sub\n        employeeId: decoded.employeeId,\n        token,\n        role: decoded.role,\n        name: decoded.name,\n        expiration: expirationDate.toISOString()\n      }));\n      return true;\n    } catch (err) {\n      console.error(\"Login error:\", err.message);\n      return false;\n    }\n  }, []);\n  const register = useCallback(async (name, email, password, role = \"employee\") => {\n    try {\n      const response = await fetch(\"http://localhost:8000/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password,\n          role\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || \"Registration failed\");\n      }\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error(\"Registration error:\", err.message);\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  }, []);\n  const logout = useCallback(() => {\n    setAuthState({\n      isLoggedIn: false,\n      userId: null,\n      employeeId: null,\n      token: null,\n      role: null,\n      name: null,\n      tokenExpiration: null\n    });\n    localStorage.removeItem(\"userData\");\n    if (logoutTimer) clearTimeout(logoutTimer);\n  }, []);\n\n  // Auto-logout timer\n  useEffect(() => {\n    if (authState.token && authState.tokenExpiration) {\n      const remainingTime = authState.tokenExpiration.getTime() - Date.now();\n      if (remainingTime > 0) {\n        logoutTimer = setTimeout(logout, remainingTime);\n      } else {\n        logout();\n      }\n    }\n    return () => clearTimeout(logoutTimer);\n  }, [authState.token, authState.tokenExpiration, logout]);\n\n  // Auto-login from localStorage\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const storedData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (storedData !== null && storedData !== void 0 && storedData.token && new Date(storedData.expiration) > new Date()) {\n        try {\n          // Optional: Verify token with backend\n          const response = await fetch(\"http://localhost:8000/verify-token\", {\n            headers: {\n              Authorization: `Bearer ${storedData.token}`\n            }\n          });\n          if (response.ok) {\n            setAuthState({\n              isLoggedIn: true,\n              userId: storedData.userId,\n              employeeId: storedData.employeeId,\n              token: storedData.token,\n              role: storedData.role,\n              name: storedData.name,\n              tokenExpiration: new Date(storedData.expiration)\n            });\n          } else {\n            localStorage.removeItem(\"userData\");\n          }\n        } catch {\n          localStorage.removeItem(\"userData\");\n        }\n      }\n    };\n    initializeAuth();\n  }, []);\n  return {\n    ...authState,\n    login,\n    logout,\n    register\n  };\n};\n_s(useAuth, \"il3ddWm3dsuko2toKWTGqCP8SW8=\");","map":{"version":3,"names":["useState","useEffect","useCallback","logoutTimer","useAuth","_s","authState","setAuthState","isLoggedIn","userId","employeeId","token","role","name","tokenExpiration","parseJwt","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","e","login","email","password","response","fetch","method","headers","body","stringify","ok","errorData","json","Error","detail","decoded","sub","expirationDate","Date","exp","newAuthState","localStorage","setItem","expiration","toISOString","err","console","error","message","register","success","logout","removeItem","clearTimeout","remainingTime","getTime","now","setTimeout","initializeAuth","storedData","getItem","Authorization"],"sources":["C:/Users/Ashwini/Desktop/DPDZERO/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => {\r\n  const [authState, setAuthState] = useState({\r\n    isLoggedIn: false,\r\n    userId: null,        // From token 'userId'\r\n    employeeId: null,   // From token 'employeeId'\r\n    token: null,\r\n    role: null,\r\n    name: null,\r\n    tokenExpiration: null\r\n  });\r\n\r\n  const parseJwt = (token) => {\r\n    try {\r\n      const base64Url = token.split('.')[1];\r\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n      const jsonPayload = decodeURIComponent(\r\n        atob(base64).split('').map((c) => \r\n          '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\r\n        ).join('')\r\n      );\r\n      return JSON.parse(jsonPayload);\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const login = useCallback(async (email, password) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/login\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || \"Login failed\");\r\n      }\r\n\r\n      const { token } = await response.json();\r\n      const decoded = parseJwt(token);\r\n      \r\n      // Validate token structure\r\n      if (!decoded.sub || !decoded.userId || !decoded.role) {\r\n        throw new Error(\"Invalid token structure\");\r\n      }\r\n\r\n      const expirationDate = new Date(decoded.exp * 1000);\r\n      \r\n      const newAuthState = {\r\n        isLoggedIn: true,\r\n        userId: decoded.userId,        // Changed from decoded.sub\r\n        employeeId: decoded.employeeId,\r\n        token,\r\n        role: decoded.role,\r\n        name: decoded.name || \"User\",\r\n        tokenExpiration: expirationDate\r\n      };\r\n\r\n      setAuthState(newAuthState);\r\n      \r\n      localStorage.setItem(\r\n        \"userData\",\r\n        JSON.stringify({\r\n          userId: decoded.userId,      // Changed from decoded.sub\r\n          employeeId: decoded.employeeId,\r\n          token,\r\n          role: decoded.role,\r\n          name: decoded.name,\r\n          expiration: expirationDate.toISOString(),\r\n        })\r\n      );\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Login error:\", err.message);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n\r\n  const register = useCallback(async (name, email, password, role = \"employee\") => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/register\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ name, email, password, role }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || \"Registration failed\");\r\n      }\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error(\"Registration error:\", err.message);\r\n      return { success: false, error: err.message };\r\n    }\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setAuthState({\r\n      isLoggedIn: false,\r\n      userId: null,\r\n      employeeId: null,\r\n      token: null,\r\n      role: null,\r\n      name: null,\r\n      tokenExpiration: null\r\n    });\r\n    localStorage.removeItem(\"userData\");\r\n    if (logoutTimer) clearTimeout(logoutTimer);\r\n  }, []);\r\n\r\n  // Auto-logout timer\r\n  useEffect(() => {\r\n    if (authState.token && authState.tokenExpiration) {\r\n      const remainingTime = authState.tokenExpiration.getTime() - Date.now();\r\n      if (remainingTime > 0) {\r\n        logoutTimer = setTimeout(logout, remainingTime);\r\n      } else {\r\n        logout();\r\n      }\r\n    }\r\n    return () => clearTimeout(logoutTimer);\r\n  }, [authState.token, authState.tokenExpiration, logout]);\r\n\r\n  // Auto-login from localStorage\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      const storedData = JSON.parse(localStorage.getItem(\"userData\"));\r\n      \r\n      if (storedData?.token && new Date(storedData.expiration) > new Date()) {\r\n        try {\r\n          // Optional: Verify token with backend\r\n          const response = await fetch(\"http://localhost:8000/verify-token\", {\r\n            headers: { Authorization: `Bearer ${storedData.token}` }\r\n          });\r\n          \r\n          if (response.ok) {\r\n            setAuthState({\r\n              isLoggedIn: true,\r\n              userId: storedData.userId,\r\n              employeeId: storedData.employeeId,\r\n              token: storedData.token,\r\n              role: storedData.role,\r\n              name: storedData.name,\r\n              tokenExpiration: new Date(storedData.expiration)\r\n            });\r\n          } else {\r\n            localStorage.removeItem(\"userData\");\r\n          }\r\n        } catch {\r\n          localStorage.removeItem(\"userData\");\r\n        }\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  return {\r\n    ...authState,\r\n    login,\r\n    logout,\r\n    register\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}