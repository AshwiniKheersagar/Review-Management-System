{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nlet logoutTimer;\nexport const useAuth = () => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null);\n  const [role, setRole] = useState(null);\n  const [name, setName] = useState(null);\n  const [department, setDepartment] = useState(null);\n  const [tokenExpirationDate, setTokenExpirationDate] = useState(null);\n\n  // ✅ LOGIN handler\n  const login = useCallback((userId, token, role, name, department, expirationDate) => {\n    setIsLoggedIn(true);\n    setUserId(userId);\n    setToken(token);\n    setRole(role);\n    setName(name);\n    setDepartment(department);\n    const tokenExpiry = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60); // 1 hour\n\n    setTokenExpirationDate(tokenExpiry);\n    localStorage.setItem(\"userData\", JSON.stringify({\n      userId,\n      token,\n      role,\n      name,\n      department,\n      expiration: tokenExpiry.toISOString()\n    }));\n  }, []);\n\n  // ✅ LOGOUT handler\n  const logout = useCallback(() => {\n    setIsLoggedIn(false);\n    setUserId(null);\n    setToken(null);\n    setRole(null);\n    setName(null);\n    setDepartment(null);\n    setTokenExpirationDate(null);\n    localStorage.removeItem(\"userData\");\n  }, []);\n\n  // ✅ Auto-logout on token expiry\n  useEffect(() => {\n    if (token && tokenExpirationDate) {\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExpirationDate]);\n\n  // ✅ Auto-login on app load (if valid token exists)\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\n    if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\n      login(storedData.userId, storedData.token, storedData.role, storedData.name, storedData.department, new Date(storedData.expiration));\n    }\n  }, [login]);\n  return {\n    isLoggedIn,\n    userId,\n    token,\n    role,\n    name,\n    department,\n    login,\n    logout\n  };\n};\n_s(useAuth, \"Anc9D7ZJHki848lqaGUqYCqLK6E=\");","map":{"version":3,"names":["useState","useEffect","useCallback","logoutTimer","useAuth","_s","isLoggedIn","setIsLoggedIn","userId","setUserId","token","setToken","role","setRole","name","setName","department","setDepartment","tokenExpirationDate","setTokenExpirationDate","login","expirationDate","tokenExpiry","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","logout","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem"],"sources":["C:/Users/Ashwini/Desktop/DPDZERO/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userId, setUserId] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  const [role, setRole] = useState(null);\r\n  const [name, setName] = useState(null);\r\n  const [department, setDepartment] = useState(null);\r\n  const [tokenExpirationDate, setTokenExpirationDate] = useState(null);\r\n\r\n  // ✅ LOGIN handler\r\n  const login = useCallback(\r\n    (userId, token, role, name, department, expirationDate) => {\r\n      setIsLoggedIn(true);\r\n      setUserId(userId);\r\n      setToken(token);\r\n      setRole(role);\r\n      setName(name);\r\n      setDepartment(department);\r\n\r\n      const tokenExpiry =\r\n        expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60); // 1 hour\r\n\r\n      setTokenExpirationDate(tokenExpiry);\r\n\r\n      localStorage.setItem(\r\n        \"userData\",\r\n        JSON.stringify({\r\n          userId,\r\n          token,\r\n          role,\r\n          name,\r\n          department,\r\n          expiration: tokenExpiry.toISOString(),\r\n        })\r\n      );\r\n    },\r\n    []\r\n  );\r\n\r\n  // ✅ LOGOUT handler\r\n  const logout = useCallback(() => {\r\n    setIsLoggedIn(false);\r\n    setUserId(null);\r\n    setToken(null);\r\n    setRole(null);\r\n    setName(null);\r\n    setDepartment(null);\r\n    setTokenExpirationDate(null);\r\n    localStorage.removeItem(\"userData\");\r\n  }, []);\r\n\r\n  // ✅ Auto-logout on token expiry\r\n  useEffect(() => {\r\n    if (token && tokenExpirationDate) {\r\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\r\n      logoutTimer = setTimeout(logout, remainingTime);\r\n    } else {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  }, [token, logout, tokenExpirationDate]);\r\n\r\n  // ✅ Auto-login on app load (if valid token exists)\r\n  useEffect(() => {\r\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    if (\r\n      storedData &&\r\n      storedData.token &&\r\n      new Date(storedData.expiration) > new Date()\r\n    ) {\r\n      login(\r\n        storedData.userId,\r\n        storedData.token,\r\n        storedData.role,\r\n        storedData.name,\r\n        storedData.department,\r\n        new Date(storedData.expiration)\r\n      );\r\n    }\r\n  }, [login]);\r\n\r\n  return {\r\n    isLoggedIn,\r\n    userId,\r\n    token,\r\n    role,\r\n    name,\r\n    department,\r\n    login,\r\n    logout,\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}